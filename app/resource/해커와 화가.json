{
    "author": "폴 그레이엄",
    "link": "http://openapi.naver.com/l?AAAC2LsQqDMBRFv+a5FCQ1MfENGUzVjm7tWLQmJlSrlSj49w0i3OFwLue36mWXUBaAKSgG5Q2UgvwARMjI5fgQMKgcFAkqsos20no/A80hqcLaafrE32bTS/yexlN07QmvTvvGDfFsQ1G1rgNaCIrIsiTy8so4p0KkJKGERaMct54X686dyyoz9EZZ8qzF467qMnR/b1BrMLEAAAA=",
    "title": "해커와 화가",
    "image": "http://bookthumb.phinf.naver.net/cover/073/994/07399482.jpg?type=m1&udate=20150715",
    "publisher": "한빛미디어",
    "quotes": [
        {
            "page": "20",
            "text": "똑똑한 아이들은 대개 11살에서 17살 사이에 그들의 인생 중에서 최악의 시적을 보내게 된다. 그 시절에는 세상의 모든 것이 인기를 중심으로 돌아가기 때문이다. "
        },
        {
            "page": "28",
            "text": "학교의 실질적 의미는 어른들이 다른 일에 열중할 수 있도록 아이들을 한 장소에 모아서 가둬 놓는 것에 지나지 않는다. 그렇다고 해도 나는 그들의 그런 조치에 특별한 문제가 있다고 말하고 싶지는 않다. 매우 전문화된 산업 사회에서 아이들이 제멋대로 뛰어다니게 내버려 두는 것은 자칫 재앙을 초래할 수도 있기 때문이다.\n내가 참기 어려운 것은 아이들이 감옥에 갇혀 있다는 사실이 아니다. 그것은 바로 (a)아이들에게 그러한 사실을 사실대로 말해주지 않는다는 점, 그리고 (b)그 감옥이 대개 어른이 아니라 다른 아이들에게 의해서 운영된다는 점이다 "
        },
        {
            "page": "29",
            "text": "(십대들이 반항적인건 그시기의 아이들이 원래 그런게 아니라 학교라는 감옥 때문이다.) "
        },
        {
            "page": "31",
            "text": "산업혁명 전의 시기에는 그들이 가게든, 농장이든, 아니면 심지어 전함에서든, 무언가 실질적인 것을 위한 견습생이었다. 그들이 자기만의 사회를 형성하도록 방치되지 않았다. 그들은 어른의 사회에 속한 주니어 멤버였다. "
        },
        {
            "page": "47",
            "text": "나는 디버깅이란 틀린 철자나 부주의한 실수를 잡아내는 최후의 과정이라 배웠다. 그러나 내가 일한 방식대로라면 프로그래밍 자체가 완벽하게 디버깅으로 이루어져 있다. "
        },
        {
            "page": "48",
            "text": "큰 회사는 최악의 재난을 피하기 위해서 설계 산출물에 대한 표준 편차를 줄이려고 노력한다. 하지만 활기차게 진동하는 기운을 억누르면 진폭의 저점만이 아니라 고점도 함께 잃어버리게 됨을 기억해야 한다. "
        },
        {
            "page": "46",
            "text": "그 이름은 바로 스케치다. … 소설가, 화가, 그리고 건축가의 작업이 그런 것처럼 프로그램이란 전체 모습을 미리 알 수 있는 것이 아니라 작성해 나가면서 이해하게 되는 존재다. "
        },
        {
            "page": "53",
            "text": "엑스레이를 통해서 들여다보면 많은 그림에서 팔다리를 여기저기로 옳기고 얼굴 표정을 셀수 없이 고친 흔적을 고스란히 볼 수 있다. … 해킹도 이와같은 방식으로 진행되어야 한다고 생각한다. … 개발도중에 스펙이 바뀌는 것을 수용할 수 있는 방식으로 프로그램을 짜는 것이 현명할 것다. "
        },
        {
            "page": "54",
            "text": "너무 성급한 디자인(설계)도 (성급한)성능의 최적화와 똑같은 정도로 비판의 대상이 되어야 옳다. "
        },
        {
            "page": "54",
            "text": "좋은 프로그래밍 언어는 마치 유화 물감처럼 생각이 중간에 바뀌는 것을 쉽게 만들어 주어야 한다. 동적인 타이핑은 특정한 데이터 표현을 처음부터 고민할 필요가 없기 때문에 바로 이런 상황에 적합하다. "
        },
        {
            "page": "58",
            "text": "감정이입이야 말로 좋은 해커와 위대한 해커를 구분하는 결정적인 차이점일 것이다. 어떤 해커들은 상당히 영리하지만, 감정이입이라는 면에서는 혼자서 화투를 치는 사람처럼 자기중심적이다. 그들은 사물을 사용자의 관점에서 바라볼 줄 모르기 때문이 위대한 소프트웨어를 디자인하기 어렵다. "
        },
        {
            "page": "59",
            "text": "프로그램은 오직 사람이 읽기 위해서 작성되어야 한다. 컴퓨터가 그것을 실행하는 것은 부차적인 일이다. #컴퓨터프로그램구조와해석 "
        },
        {
            "page": "63",
            "text": "주석이라는 것은 급한 커브가 있는 길에 화살표 표시가 있는 것처럼 프로그램을 읽는 사람에게 꼭 전달해야 할 사항이 있을 때에만 적어 넣어야 한다. "
        },
        {
            "page": "61",
            "text": "해킹의 전성기는 바로 지금이라는 사실이다. 대부분 분야에서 걸작은 그 분야의 태동기에 등장했다. … 해킹이라는 것이 바로 지금 그 단계에 놓여있는 것으로 보인다. "
        },
        {
            "page": "69",
            "text": "(과거 불경, 신성모독, 패배주의자 라는 단어와 같이 사람을 깎아내리던 단어들은 이제는 크게 의미는 없다. 하지만 종북과 같은 단어가 대신하고 있지)"
        },
        {
            "page": "75",
            "text": "도덕적 유행은 우연이 아니라 의식적으로 만들어지는 것으로 보인다. 우리가 말할 수 없는 것이 있다는 것은 그런 말을 듣고 싶어 하지 않는 집단이 어딘가 존재한다는 의미다. "
        },
        {
            "page": "80",
            "text": "당신은 말할 수 없는 것을 발견했을때 어떠 행동을 취하는가? 나의 조언은 그것을 입 밖에 내지 말라는 것이다. 꼭 필요하다면, 최소한 그 말에 어울리는 싸움터를 고를 필요가 있다. … 당신이 세운 삶의 목표가 노란색의 권리를 회복시키는 것이라면 그 상황이야 말로 원하던 바일 것이다. 하지만 당신이 사실은 노란색의 권리보다 다른일에 더 관심이 있다면 노란색주의자라는 딱지는 방해가 될 것이다. (글쎄 어느정도는 맞겠지만 꼭 짚어야할 문제는 있지) "
        },
        {
            "page": "81",
            "text": "최선의 해결책은 무엇이라도 공개적으로 털어놓고 말할 수 있는 친구를 사귀는 것이다. "
        },
        {
            "page": "97",
            "text": "(해커는 좋은 아이디어가 나쁜 아이디어에 승리할 수 있는 세상이 매우 중요하다. 그래서 자유를 억압하는 법에 대해 민감하다. ) "
        },
        {
            "page": "114",
            "text": "(잦은 릴리즈는 버그를 고치기도 더 쉽게 만든다. 버그가 있는 코드를 작성한지 얼마 안되었기 때문)"
        },
        {
            "page": "131",
            "text": "소프트웨어를 서버에서 돌리는 것은 전혀 새로운 일이 아니다(메인프레임이 먼저) … 그렇다면 왜 데스크톱 컴퓨터가 패권을 장악했는가? 내 생각으로는 그들이 더 나은 소프트웨어를 가지고 있었기 때문이다. 그리고 마이크로컴퓨터 소프트웨어가 더 나았던 이유는 그런 소프트웨어가 주로 작은 회사에서 작성 될 수 있었기 때문이다. "
        },
        {
            "page": "135",
            "text": "IBM은 그들의 황금 송아지인 메인프레임 컴퓨팅을 완전히 포기할 수 없었기 때문에 마지못한 심정으로 뒤늦게 마이크로 컴퓨터 시장에 뛰어들었다. 마이크로소프트가 데스크톱을 구하고자 하는 마음을 품는 것은 그것과 동일한 해를 초래할 것이다. "
        },
        {
            "page": "150",
            "text": "예를 들어서 백만 달러를 벌 수 있는 방법 중의 하나는 평생 우체국에서 일하면서 번 돈을 한 푼도 쓰지 않고 저금하는 것이다. 우체국에서 50년 동안 일하는 스트레스를 상상해 보기 바란다. 스타트업이란 그 정도에 달하는 스트레스를 3~4년의 세월에 압축시켜서 경험하는 것을 의미한다. "
        },
        {
            "page": "153",
            "text": "비지니스는 돈을 창출하는게 아니라 사람들이 원하는 무엇을 수행하는 것이다. (부는 돈이 아니기 때문에 고정된 파이는 존재하지 않는다. 전체 부의 양을 키울 수 있다.) "
        },
        {
            "page": "157",
            "text": "부란 사람들이 원하는 것 "
        },
        {
            "page": "163",
            "text": "당신이 제법 안전하다고 느껴지는 직업을 가지고 있다면 당신은 부자가 될 가능성이 없다. 위험이 존재하지 않는 곳에는 영향력이 존재할 이유가 없기 때문이다.(여기서 부자는 돈이 아니다. 오픈소스를 개발하는 것도 위험을 감수 하는 것이다. 댓가를 받지 않고 있잖은가) "
        },
        {
            "page": "173",
            "text": "벤처 투자자들은 특별히 주의해야 하는 위험에 대한 목록을 가지고 있다. 목록의 맨 위에 있는 항목 중에는 사용자들을 행복하게 만드는 일보다 단순히 재미있는 기술적인 과제에 더 집착하는 테크노 매니아가 운영하는 회사를 피하라는 것이 있다. "
        },
        {
            "page": "177",
            "text": "공부벌레가 그들의 점심값을 그대로 가지고 있도록 내버려 두라. 그런 나라가 세상을 지배하게 될 것이다.(그게 바로 보편적 정의지) "
        },
        {
            "page": "181",
            "text": "(7장은 신자유주의의 표본이다. 분명 남들 보다 100배의 생산성을 가진사람들이 있는건 동의하지만 그들의 힘만으로 세상이 굴러 가는 것은 아니다. 공정한 분배는 분명 필요하다. 무엇보다 가진자들이 출발선의 앞에서 출발하는 것 만은 막아야 할 것이다. 그게 분배이다. )"
        },
        {
            "page": "193",
            "text": "현대 사회에서는 수입의 차이가 늘어나는 것이 오히려 사회가 건강하다는 사실을 나타내는 것이라고 주장하고 싶다.(공감할 수 없다. 수입의 차이가 아니라 출발선의 차이를 줄인 사회다. ) "
        },
        {
            "page": "217",
            "text": "미적 취향이 성장을 했다면 과거의 미적 취향은 단지 현재의 것과 달랐던 게 아니라덜 성숙한 것이었던 셈이다. (내가 발라드만 좋아하다 다양한 장르를 좋아하게 된것도 마찬가지다. 취향에 경계는 없다고 말하지 않았나.) "
        },
        {
            "page": "219",
            "text": "시대를 뛰어 넘는다는 것은 유행을 따르지 않는 것이다. "
        },
        {
            "page": "222",
            "text": "유머감각을 유지한다는 것은 불행을 가볍게 털어낸다는 뜻이고 유머감각을 상실한다는 것은 불행에 압도된다는 뜻이다. "
        },
        {
            "page": "222",
            "text": "위대한 작품을 탄생시킨 사람들이 가진 공통점은 그들이 엄청난 노력을 기울였다는 사실이다. 당신이 지금 엄청난 노력을 기울이고 있지 않다면 스스로 시간을 낭비하고 있는 것이다. "
        },
        {
            "page": "226",
            "text": "좋은 디자인은 자연을 닮았다. 자연을 닮은 것이 본질적으로 좋은 이유는 자연은 이미 오랜 세월 동안  문제를 해결하기 위해서 노력해 왔기 때문이다. "
        },
        {
            "page": "231",
            "text": "미켈란젤로는 자신의 스타일로 그리기 위해서 일부러 노력하지 않았다. 그는 그저 잘 그리려고 노력했을 뿐이다. 그렇기 때눈에 그는 자신만의 스타일을 가질 수 있었다. 지니고 있을 가치가 있는 스타일은 일부러 추구한 것이 아니라 최선을 다 하다보니 어쩔 수 없이 갖게된 결과일 뿐이다. "
        },
        {
            "page": "231",
            "text": "좋은 디자인은 뛰어난 사람들의 모임에서 나온다. "
        },
        {
            "page": "234",
            "text": "추함을 참을 수 없는 것, 그 자체만으로는 충분하지 않다. 좋은 후각을 발달시키기 전에 해당 분야의 일을 충분히 이해하고 있어야 한다. 창조 이전에 자기 숙제부터 해야 하는 것이다. 어떤 분야의 전문가로 성장함에 따라서, \"이런, 이것보다 더 나은 방법이 있을 거야\" 라는 희미한 목소리를 듣게 될 것이다. 그 목소리를 무시하지 않기 바란다. 위대한 작품을 만드는 방법은 바로 자기 자신만의 미적 취향과 그것을 만족하게 할 수 있는 능력에 달려 있는 것이다. "
        },
        {
            "page": "241",
            "text": "문제인 것은 어떤 언어를 오랫동안 사용하면 어느 순간부터 사고 자체가 그 언어로 이루어 진다는 사실이다. "
        },
        {
            "page": "254",
            "text": "언어 자체는 테크놀로지가 아니기 때문에 천천히 발전한다. 언어는 표기다. "
        },
        {
            "page": "254",
            "text": "우리가 컴퓨터를 이용해서 해결하고자 하는 문제의 일부는 사실 우리가 아니라 컴퓨터 자체가 만들어 낸 것이다. "
        },
        {
            "page": "255",
            "text": "100년 후의 빠른 하드웨어가 우리에게 제공해 줄 추가 사이클을 가지고 우리가 무엇을 할지에 대해서 나는 분명하게 말할 수 있다. 추가 사이클의 대부분이 그냥 낭비될 것이다. "
        },
        {
            "page": "256",
            "text": "세상에는 좋은 낭비와 나쁜 낭비가 있다. 나는 더 많이 소모함으로써 더 단순한 디자인을 얻을 수 있는 좋은 낭비에 관심이 있다. "
        },
        {
            "page": "269",
            "text": "선언의 과정은 최적화에 대한 힌트에 불과하고 프로그램의 정확성에는 아무런 역할도 하지 않는다 "
        },
        {
            "page": "258",
            "text": "비효율적인 소프트웨어가 그 자체로 엉터리인 것은 아니다. 진짜 엉터리는 프로그래머에게 불필요한 일을 하도록 강제하는 언어다. "
        },
        {
            "page": "261",
            "text": "객체지향 소프트웨어 중에는 재사용이 가능한 것도 있지만, 재사용 가능성을 보장하는 것은 객체지향성이 아니라 상향식 접근방법이다.(라이브러리는 하나의 언어처럼 존재하기 때문에 재사용 가능한 것이다. 미래의 언어는 이런식으로 언어가 또하나의 언어를 만들고 그게 반복되어 여러계층을 갖게 될 것이다. ) "
        },
        {
            "page": "262",
            "text": "그래서 100년 내에는 병렬주의는 특별한 목적의 애플리케이션을 제외한 보통 프로그램에서는 사용되지 않을 가능성이 높다. 병렬주의를 사용한다면 그것은 성급한 최적화의 예가 될 것이다. "
        },
        {
            "page": "273",
            "text": "테크놀로지를 선택할 때는 다른 사람들이 무엇을 사용하고 있는가가 아니라 무엇이 최선인가에 대해서 생각해야 하는 것이다. "
        },
        {
            "page": "278",
            "text": "다른 사람들이 그것(리스프)을 이용하지 않는 이유는 프로그래밍 언어라는 것이 단순히 테크놀러지가 아니라 습관이기 때문이다. 이 세상에서 습관처럼 천천히 변하는 것이 또 없다. "
        },
        {
            "page": "281",
            "text": "그들은 자기가 사용하고 있는 언어에 충분히 만족하고 있다. 그 언어가 프로그램에 대한 그들의 관념을 규정한다. "
        },
        {
            "page": "295",
            "text": "리스프와 포트란은 컴퓨터 언어의 진화계보에서 두 개의 큰 줄기를 형성하는 언어이다. 두 줄기의 하나는 수학에 뿌리를 두고 있고, 다른 하나는 기계의 아키텍쳐에 뿌리를 두고 있다. "
        },
        {
            "page": "312",
            "text": "충분히 복잡한 C나 포트란 프로그램은 비공식적으로 정의된 버그투성이의 느린 커먼 리스프의 절반을 담고 있다. "
        },
        {
            "page": "312",
            "text": "OOP세계에서는 패턴이라는 말을 흔히 듣게 된다. 나는 그 패턴이라는 것이 사실상 위에서 본 C의 경우, 즉 인간 컴파일러에 대한 증거가 아닐까 의심스럽다. "
        },
        {
            "page": "312",
            "text": "나는 프로그램 안에서 패턴을 발견하면 그것을 뭔가 문제가 발생하고 있다는 신호로 받아들인다. 프로그램의 형태는 오직 그것이 해결해야 하는 문제만 반영해야 한다. 코드에 존재하는 그 밖의 모든 정형성은 최소한 나에게 있어서 내가 충분히 강력하지 않은 추상을 이용하고 있다는 신호로 다가온다. 때로는 간결한 매크로를 작성하는 것이 아니라 매크로가 확장된 형태를 일일이 작성하고 있는 것이다. "
        },
        {
            "page": "313",
            "text": "피터 노르빅은 디자인패턴에서 나오는 23개 패턴 중에서 16개가 리스프에서는 보이지 않거나 더 간단하다는 사실을 발견했다. "
        },
        {
            "page": "316",
            "text": "언어다 유명해지기 위해서 훌륭해야 한다기 보다는 오히려 훌륭해지기 위해서 유명해져야 하는 측면이 있다. (유명해지면 참여자가 많아지고 개선이 이뤄지므로) "
        },
        {
            "page": "317",
            "text": "스무명의 사용자가 자발적으로 그 언어를 선택했다면, 그것은 의미가 있다고 본다. … 최초의 스무명에 도달하기 위한 최선의 방법은 트로이의목마를 사용하는 것일 수도 있다. 사람들에게 그들이 원하는 소프트웨어를 제공해주되, 그 소프트웨어를 새로운 언어로 작성하는 것이다. "
        },
        {
            "page": "324",
            "text": "펄은 보고서를 작성하는 유틸리티들의 묶음으로 삶을 시작했고, 그것을 이용해서 일회용 프로그램을 만드는 사람들이 늘어나면서 하나의 프로그래밍 언어로 진화하기 시작했다. "
        },
        {
            "page": "329",
            "text": "과거에는 최종 사용자를 위한 애플리케이션에서는 효율성이 그렇게 큰 의미를 갖지 않았다. 개발자들은 사용자들의 데스크톱에 점점 더 빠른 프로세서가 올라올 것이라고 가정했다. 그렇지만 파킨슨의 법칙은 무어의 법칙만큼이나 강력한 것으로 판명되었다. 소프트웨어는 자원의 양이 아무리 빠르게 증가되어도 사용가능한 자원을 모조리 소비해 버릴 정도로 탐욕스럽게 부풀어 오르는 것이다. "
        },
        {
            "page": "332",
            "text": "문제를 해결할 가능성에 대해서는 낙관해야 하지만, 당신이 그 시점까지 개발한 해결책의 가치에 대해서는 끊임없이 회의를 해야 하는 것이다. "
        },
        {
            "page": "332",
            "text": "좋은 작품을 산출하는 사람들은 대개 그들이 일하는 동안에는 자기가 형편없는 작품을 만들고 있다고 생각한다. 다른 사람들은 그 작품을 보고서 놀랍다고 생각을 하지만, 창조자는 오로지 결점만 보게 된다. 이러한 패턴은 우연이 아니다. 근심이 좋은 작품을 만드는 것이다. "
        },
        {
            "page": "340",
            "text": "자기가 포함되어 있지 않은 그룹을 위해서 무언가를 설계할 때는 그 그룹 안의 사람들이 아무래도 자기보다 덜 똑똑하다고 생각하게 된다. 사용자를 위에서 내려다보게 되면, 그것이 아무리 선량한 의도에서라도 설계자의 작업을 망치기 쉽다. … C, 리스프, 스몰토크는 설계자들이 자기가 직접 사용하려고 만든 언어다. 그에 비해서 코볼, 에이다, 자바는 다른 사람더러 사용하라고 만든 언어이다. 당신이 바보 천치들을 위해서 무언가를 만들고 있다고 생각하게 되면, 심지어 바보 천치들에게조차 별 볼 일 없는 작품을 만들 확률이 높다. "
        },
        {
            "page": "346",
            "text": "화가가 작품을 완성하는 경우는 없다. 단지 그리는 작업을 멈출 뿐이다. "
        }
    ]
}